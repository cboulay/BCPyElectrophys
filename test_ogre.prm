Source:Signal%20Properties:DataIOFilter floatlist SourceChGain= 16 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 0.003 % % // gain for each channel (A/D units -> muV)
Visualize:Source%20Signal:DataIOFilter int VisualizeSource= 0 1 0 1 // visualize raw brain signal (0=no, 1=yes) (boolean)
Source:SignalGeneratorADC int ModulateAmplitude= 1 0 0 1 // Modulate the amplitude with the mouse (0=no, 1=yes) (boolean)
Source:SignalGeneratorADC int SineChannelX= 1 0 0 % // Channel number of sinewave controlled by mouse x position
Source:SignalGeneratorADC int SineChannelY= 2 0 0 % // Channel number of sinewave controlled by mouse y position (0 for all)
Source:SignalGeneratorADC float SineFrequency= 12Hz 10Hz % % // Frequency of sine wave
Source:SignalGeneratorADC int SineAmplitude= 500muV 100muV % % // Amplitude of sine wave
Source:SignalGeneratorADC int NoiseAmplitude= 0muV 30muV % % // Amplitude of white noise (common to all channels)
Source:SignalGeneratorADC int SignalType= 1 0 0 2 // numeric type of output signal:  0: int16, 1: float32, 2: int32 (enumeration)
Filtering:Spectral%20Estimation:ARThread float FirstBinCenter= 12Hz 0Hz % % // Center of first frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float LastBinCenter= 12Hz 30Hz % % // Center of last frequency bin (in Hz)
Filtering:Spectral%20Estimation:ARThread float BinWidth= 3Hz 3Hz % % // Width of spectral bins (in Hz)
Filtering:Spectral%20Estimation:ARThread int OutputType= 0 0 0 2 // 0: Spectral Amplitude, 1: Spectral Power, 2: Coefficients (enumeration)
Filtering:Spectral%20Estimation:SpectralEstimatorChoice int SpectralEstimator= 2 1 0 2 // Choice of spectral estimation algorithm, 0: None, 1: AR, 2: FFT (enumeration)
Filtering:Windowing:WindowingThread int WindowLength= 1.0s 0.5s % % // Length of window
Filtering:Windowing:WindowingThread int Detrend= 1 0 0 2 // Detrend data? 0: no, 1: mean, 2: linear (enumeration)
Filtering:Windowing:WindowingThread int WindowFunction= 1 0 0 3 // Window function 0: Rectangular, 1: Hamming, 2: Hann, 3: Blackman (enumeration)
Filtering:LinearClassifier matrix Classifier= 1 { input%20channel input%20element%20(bin) output%20channel weight } 1 1 1 1 // Linear classification matrix in sparse representation
Filtering:LPFilter float LPTimeConstant= 0.5 16s 0 % // time constant for the low pass filter
Filtering:Normalizer floatlist NormalizerOffsets= 1 112.911 0 % % // normalizer offsets
Filtering:Normalizer floatlist NormalizerGains= 1 0.0776177 0 % % // normalizer gain values
Filtering:Normalizer intlist Adaptation= 1 2 0 0 3 // 0: no adaptation, 1: zero mean, 2: zero mean, unit variance 3: zero mean, pcnt diff (enumeration)
Filtering:Normalizer float BufferLength= 30s 9s % % // time window of past data per buffer that enters into statistic
Visualize:Processing%20Stages int VisualizeNormalizer= 1 0 0 1 // Visualize Normalizer output (boolean)
Feedback:Design int ContFeedbackEnable= 1 0 0 1 // Enable. Choose feedback below.: 0 no, 1 yes (boolean)
Feedback:Design list FeedbackChannels= 1 1 // Channel(s) for feedback
Feedback:Visual int VisualFeedback= 1 0 0 1 // Show online feedback? (boolean)
Feedback:Visual intlist VisualType= 2 0 1 0 0 2 // Feedback type: 0 bar, 1 cursor, 2 color_change, 3 none
System:State%20Vector int StateVectorLength= 28 16 % % // length of the state vector in bytes
